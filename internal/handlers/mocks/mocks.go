// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=mocks/mocks.go -package=mock_service
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	auth "github.com/HeadGardener/coursework/internal/lib/auth"
	models "github.com/HeadGardener/coursework/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// LogOut mocks base method.
func (m *MockAuthService) LogOut(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogOut", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogOut indicates an expected call of LogOut.
func (mr *MockAuthServiceMockRecorder) LogOut(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogOut", reflect.TypeOf((*MockAuthService)(nil).LogOut), ctx, userID)
}

// ParseAccessToken mocks base method.
func (m *MockAuthService) ParseAccessToken(token string) (auth.UserAttributes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAccessToken", token)
	ret0, _ := ret[0].(auth.UserAttributes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAccessToken indicates an expected call of ParseAccessToken.
func (mr *MockAuthServiceMockRecorder) ParseAccessToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAccessToken", reflect.TypeOf((*MockAuthService)(nil).ParseAccessToken), token)
}

// Refresh mocks base method.
func (m *MockAuthService) Refresh(ctx context.Context, accessToken, refreshToken string) (models.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx, accessToken, refreshToken)
	ret0, _ := ret[0].(models.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockAuthServiceMockRecorder) Refresh(ctx, accessToken, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockAuthService)(nil).Refresh), ctx, accessToken, refreshToken)
}

// SignIn mocks base method.
func (m *MockAuthService) SignIn(ctx context.Context, username, password string) (models.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, username, password)
	ret0, _ := ret[0].(models.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthServiceMockRecorder) SignIn(ctx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthService)(nil).SignIn), ctx, username, password)
}

// SignUp mocks base method.
func (m *MockAuthService) SignUp(ctx context.Context, username, name string, age int, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, username, name, age, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthServiceMockRecorder) SignUp(ctx, username, name, age, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthService)(nil).SignUp), ctx, username, name, age, password)
}

// MockDrinkService is a mock of DrinkService interface.
type MockDrinkService struct {
	ctrl     *gomock.Controller
	recorder *MockDrinkServiceMockRecorder
}

// MockDrinkServiceMockRecorder is the mock recorder for MockDrinkService.
type MockDrinkServiceMockRecorder struct {
	mock *MockDrinkService
}

// NewMockDrinkService creates a new mock instance.
func NewMockDrinkService(ctrl *gomock.Controller) *MockDrinkService {
	mock := &MockDrinkService{ctrl: ctrl}
	mock.recorder = &MockDrinkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDrinkService) EXPECT() *MockDrinkServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockDrinkService) Add(ctx context.Context, drink *models.Drink) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, drink)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockDrinkServiceMockRecorder) Add(ctx, drink any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDrinkService)(nil).Add), ctx, drink)
}

// Delete mocks base method.
func (m *MockDrinkService) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDrinkServiceMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDrinkService)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockDrinkService) GetAll(ctx context.Context, adult bool) ([]models.Drink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, adult)
	ret0, _ := ret[0].([]models.Drink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDrinkServiceMockRecorder) GetAll(ctx, adult any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDrinkService)(nil).GetAll), ctx, adult)
}

// GetByID mocks base method.
func (m *MockDrinkService) GetByID(ctx context.Context, id int, adult bool) (models.Drink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id, adult)
	ret0, _ := ret[0].(models.Drink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDrinkServiceMockRecorder) GetByID(ctx, id, adult any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDrinkService)(nil).GetByID), ctx, id, adult)
}

// Update mocks base method.
func (m *MockDrinkService) Update(ctx context.Context, id int, drink *models.Drink) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, drink)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDrinkServiceMockRecorder) Update(ctx, id, drink any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDrinkService)(nil).Update), ctx, id, drink)
}
